#!/usr/bin/bash
#------------------------------------------------------------------------------
# copy output of the job to the permanent storage
# call example: 
# -------------
# ts_warm_bore/scripts/move_stage_output ts_warm_bore 760_1000 pbar:vd91 ts1:sim
#------------------------------------------------------------------------------
   project=$1 # ts_warm_bore
      dsid=$2 # 711_0001
  p_istage=$3 # gen:250_20000
p_job_type=$4 # s1:sim
      doit=$5
  
  if [ ".$doit" == "." ] ; then prefix="echo "; else prefix="" ; fi

 istage=`echo $p_istage | awk -F : '{print $1}'`
istream=`echo $p_istage | awk -F : '{print $2}'`
fileset=`echo $p_istage | awk -F : '{print $3}'`

istub=${istream};
if [ ".$fileset" != "." ] ; then istub=${istub}_${fileset} ; fi

   stage=`echo $p_job_type | awk -F : '{print $1}'`
 jobtype=`echo $p_job_type | awk -F : '{print $2}'`
job_type=${stage}_$jobtype

#------------------------------------------------------------------------------
# get_fcl $project/AAA_PROJECT.txt $dsid $istage $istub $jobtype
#------------------------------------------------------------------------------
get_job_line() {
    project_file=$1
    cat $project_file | grep $2 | awk -v istage=$3 -v istub=$4 -v job_type=$5 '{if (($2 == istage) && ($3 == istub) && ($4 == job_type)) print  $0}'
}

get_fcl() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $5}' 
}

get_emerge() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $6}' 
}

get_nev_per_job() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $8}' 
}

get_segments() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $9}' 
}

get_grid_job_id() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $10}' 
}
#------------------------------------------------------------------------------
# end of parsing function definition
#------------------------------------------------------------------------------
aaa_project_file=$project/AAA_PROJECT.txt
      grid_jobid=`get_grid_job_id  $aaa_project_file $dsid $istage $istub $job_type`

 input_dir=/pnfs/mu2e/scratch/users/murat/workflow/$project.$dsid.${istage}_${istub}.$job_type/outstage/$grid_jobid

output_dir=/mu2e/data/users/murat/datasets/$project/$dsid/$stage

if [ ! -d $output_dir ] ; then $prefix mkdir -p $output_dir ; fi

output_streams=""

if   [ $p_job_type == "s3:sim"  ] ; then output_streams="mothers crv tgtstop ootstop truncated"
elif [ $p_job_type == "s1:sim"  ] ; then output_streams="mubeam"
elif [ $p_job_type == "s2:sim"  ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts1:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts2:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts3:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts4:sim" ] ; then output_streams="ootstops tgtstops"
fi

setup ifdhc
copy="ifdh cp"

for stream in $output_streams ; do
    od=$output_dir/$stream ; if [ ! -d $od ] ; then $prefix mkdir -p $od ; fi

    for f in `ls $input_dir/00/*/sim.murat.*.*.art | grep -i $stream` ; do 
	bn=`basename $f`
	${prefix} $copy $f $od/$bn 
    done

    for f in `ls $input_dir/00/*/nts.murat.*.*.*.stn | grep -i $stream` ; do 
	bn=`basename $f`
	${prefix} $copy $f $od/`basename $f`
    done
done

copy="cp"

od=$output_dir/hist ; if [ ! -d $od ] ; then $prefix mkdir -p $od ; fi

for f in `ls $input_dir/00/*/nts.murat.*.root` ; do 
    ${prefix} $copy $f $od/`basename $f`
done
#------------------------------------------------------------------------------
# handle log files
#------------------------------------------------------------------------------
od=$output_dir/log ; if [ ! -d $od ] ; then $prefix mkdir -p $od ; fi

for f in `ls $input_dir/00/*/log.*.log` ; do 
    ${prefix} $copy $f $od/`basename $f`
done

if [ ".$prefix" == "." ] ; then
#------------------------------------------------------------------------------
# done with copying files, check if the jobs finished successfully
#------------------------------------------------------------------------------
    for f in `ls $od/*.log` ; do 
	x=`cat $f | grep "mu2egrid exit status"` ; 
	if [ ".$x" != "." ] ; then 
	    x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ; 
	    if [ ".$x" != ."0" ] ; then 
		echo $f: ERROR ; 
		mv $f $f.err
	    fi
	fi; 
    done
#------------------------------------------------------------------------------
# calculate total number of input events
#------------------------------------------------------------------------------
    for f in `ls $od/*.log` ; do 
	grid=`cat $f | grep "mu2egrid exit status"`
	if [ ".$grid" != "." ] ; then
	    x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ;
	    
	    if [ .$x == ."0" ] ; then 
		cat $f | grep "TrigReport Events total"
	    fi
	else
	    echo WARNING: file $f doesnt have mu2egrid exit status
	cat $f | grep "TrigReport Events total"
	fi 
    done  | awk '{n+=$5} END{printf "INPUT:            nevents=%10i\n",n}'
#------------------------------------------------------------------------------
# calculate number of output events in different output streams
#------------------------------------------------------------------------------
    echo $LINENO: output_streams=$output_streams
    for stream in $output_streams ; do
	for f in `ls $od/*.log` ; do 
	    grid=`cat $f | grep "mu2egrid exit status"`
	    if [ ".$grid" != "." ] ; then
		x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ;
		
		output_path=$stream

		echo output_path=$stream

		if [ $stream == "mubeam"   ] ; then output_path="mubeamout"     ; fi
		if [ $stream == "ootstops" ] ; then output_path="ootStopOutput" ; fi
		if [ $stream == "tgtstops" ] ; then output_path="tgtStopOutput" ; fi
		
		if [ .$x == ."0" ] ; then 
		    cat $f | grep TrigReport | grep -i $output_path
		fi
	    else
		echo WARNING: file $f doesnt have mu2egrid exit status
		cat $f | grep TrigReport | grep -i $output_path
	    fi 
	done  | awk -v s=$stream '{n+=$5} END{printf "stream=%-10s nevents=%10i\n",s,n}'
    done
fi
