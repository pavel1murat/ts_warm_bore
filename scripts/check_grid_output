#!/bin/bash
#------------------------------------------------------------------------------
# ts_warm_bore/scripts/check_grid_output ts_warm_bore 711_2064 pbar:vd91:01 ts1:sim . 
# make sure that AAA_PROJECT.txt has the grid_jobid defined 
#------------------------------------------------------------------------------
     project=$1   # ts_warm_bore
        dsid=$2   # 711_1010
    p_istage=$3   # s1:mubeam  or gen:250_20000:03 or pbar:vd91 or pbar:vd91:01
  p_job_type=$4   # s1:sim or s2:stn
       local=$5   # local : check local log files, default : ''

      istage=`echo $p_istage | awk -F : '{print $1}'`
     istream=`echo $p_istage | awk -F : '{print $2}'`
     fileset=`echo $p_istage | awk -F : '{print $3}'`

istub=${istream};
if [ ".$fileset" != "." ] ; then istub=${istub}_${fileset} ; fi

       stage=`echo $p_job_type | awk -F : '{print $1}'`
       jtype=`echo $p_job_type | awk -F : '{print $2}'`
    job_type=${stage}_${jtype}
#------------------------------------------------------------------------------
# get_fcl $project/AAA_PROJECT.txt $dsid $istage $istub $job_type
#------------------------------------------------------------------------------
get_job_line() {
    project_file=$1
    cat $project_file | grep $2 | awk -v istage=$3 -v istub=$4 -v job_type=$5 '{if (($2 == istage) && ($3 == istub) && ($4 == job_type)) print  $0}'
}

get_fcl() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $5}' 
}

get_emerge() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $6}' 
}

get_nev_per_job() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $8}' 
}

get_segments() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $9}' 
}

get_grid_job_id() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $10}' 
}
#------------------------------------------------------------------------------
# end of parsing function definition
#------------------------------------------------------------------------------
aaa_project_file=$project/AAA_PROJECT.txt

  nsubm_sections=`get_segments    $aaa_project_file $dsid $istage $istub $job_type`
      grid_jobid=`get_grid_job_id $aaa_project_file $dsid $istage $istub $job_type`

grid_dsid=$project.$dsid.${istage}_${istub}.${job_type}

x=`get_job_line $aaa_project_file $dsid $istage $istub $job_type`
echo debugging: line:$x

echo grid_jobid=$grid_jobid  grid_dsid=$grid_dsid


      topdir=/pnfs/mu2e/scratch/users/$USER/workflow/$grid_dsid/outstage
echo topdir=$topdir
stage_dir=$topdir/$grid_jobid;

echo "# job output directory:" $stage_dir; 

# exit

nsections=0
n_staging_failures=0
nfailed=0
ntotal=0
nsuccess=0

 logdir=/mu2e/data/users/murat/subprojects/$project/$dsid/catalog/$stage
script_logfile=$logdir/$project.$dsid.${istage}_${istream}.${job_type}.check_grid_output.log

if [ ! -d $logdir ] ; then mkdir -p $logdir ; fi

echo "#" `date`                                              >| $script_logfile
echo "# job output directory:" $stage_dir                    >> $script_logfile


if [ ".$local" != ".local" ] ; then
    # parse logfiles from  /pnfs staging area
    list_of_subjobs=`ls $stage_dir`

    for subdir in $list_of_subjobs ; do

	sdir=$stage_dir/$subdir
	echo "# subdirectory        :" $sdir; 
	echo "# subdirectory        :" $sdir >> $script_logfile

	list_of_sections=`ls $sdir`
	#    if [ ".$order" != "." ] ; then list_of_sections=`ls -tr $sdir` ; fi

	for d in $list_of_sections ; do 
	    #    echo $d
	    #------------------------------------------------------------------------------
	    # skip directories corresponding to non-completed sections like '00015.wuue'
	    # now they contain just one .log file per subdirectory
	    #------------------------------------------------------------------------------
	    nf=`echo $d | awk -F . '{print NF}'` 
	    if [ $nf == 1 ] ; then
		logfile=`ls $sdir/$d/*.log` ;
		x=`cat $logfile | grep "mu2egrid exit status"`; 
		if [ ."$x" == "." ] ; then
		    #------------------------------------------------------------------------------
		    # no return code - print warning, but dont assume the staging failure
		    #------------------------------------------------------------------------------
		    printf " %5s : section %-6s was running on %-40s , NO mu2egrid exit status %3i\n" $nsections $d $host >> $script_logfile
		    # n_staging_failures=$((n_staging_failures+1))
		else
		    rc=`echo $x | awk '{print $4}'`
		    host=`cat $logfile | grep "Starting on host" | awk '{print $5}'`;
		    y=`cat $logfile | grep "TrigReport Events total"`
		    
		    printf " %5s : section %-6s was running on %-40s , mu2egrid exit status: %3i $y\n" $nsections $d $host $rc >> $script_logfile
		    
		    if [ $rc != 0 ] ; then nfailed=$((nfailed+1)) ; else nsuccess=$((nsuccess+1)) ; fi
		fi
		nsections=$((nsections+1))
	    else
		printf " %10s : GRID ERROR, job not completed\n" $d >> $script_logfile
	    fi
	    ntotal=$((ntotal+1))
	done
    done
else
    # parse logfiles from the local directory
    logdir=/mu2e/data/users/murat/datasets/$project/$dsid/$stage/log
    echo logdir=$logdir

    for logfile in `ls $logdir/*.log` ; do 
	x=`cat $logfile | grep "mu2egrid exit status"`; 
	if [ ."$x" == "." ] ; then
	    #------------------------------------------------------------------------------
	    # no return code - print warning, but dont assume the staging failure
	    #------------------------------------------------------------------------------
	    printf " %5s : section %-6s was running on %-40s , NO mu2egrid exit status %3i\n" $nsections $d $host >> $script_logfile
	    # n_staging_failures=$((n_staging_failures+1))
	else
	    rc=`echo $x | awk '{print $4}'`
	    host=`cat $logfile | grep "Starting on host" | awk '{print $5}'`;
	    y=`cat $logfile | grep "TrigReport Events total"`
	    
	    printf " %5s : section %-6s was running on %-40s , mu2egrid exit status: %3i $y\n" $nsections $d $host $rc >> $script_logfile
	    
	    if [ $rc != 0 ] ; then nfailed=$((nfailed+1)) ; else nsuccess=$((nsuccess+1)) ; fi
	fi
	nsections=$((nsections+1))
    done
 
fi

echo --------------------------------------------                  >> $script_logfile
echo JOB SUMMARY:                                                  >> $script_logfile
echo --------------------------------------------                  >> $script_logfile
printf "submitted           : %5i sections\n" $nsubm_sections      >> $script_logfile
printf "output checked      : %5i sections\n" $ntotal              >> $script_logfile
printf "completed           : %5i sections\n" $nsections           >> $script_logfile
printf "staging failures    : %5i sections\n" $n_staging_failures  >> $script_logfile
printf "completed with rc=0 : %5i sections\n" $nsuccess            >> $script_logfile
printf "mu2e job failed     : %5i sections\n" $nfailed             >> $script_logfile 

echo printing logfile: $script_logfile
cat $script_logfile
