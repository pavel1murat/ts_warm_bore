#!/bin/bash 
#-----------------------------------------------------------------------------------------------
# CATALOG_DIR needs to be defined, normally, points to /grid/fermiapp/mu2e/users/murat/catalogs
# defined in my ~/.bashrc
#-----------------------------------------------------------------------------------------------
        project=$1 # ts_warm_bore # $1 # ts_inner_bore
           dsid=$2 # 711_0001
       p_istage=$3 # s1:mubeam ... or gen:250_20000 ; 
#             ids=$4 # if not ".", then catalog of the input dataset with a list of files in it
     p_job_type=$4 # s1:sim, s2:sim, or s3:stn ...
           doit=$5

      istage=`echo $p_istage | awk -F : '{print $1}'`;
     istream=`echo $p_istage | awk -F : '{print $2}'`;
     fileset=`echo $p_istage | awk -F : '{print $3}'`;

istub=${istream};
if [ ".$fileset" != "." ] ; then istub=${istub}_${fileset} ; fi

fss="files" ; if [ ".$fileset" != "." ] ; then fss=$fss.$fileset ; fi

#------------------------------------------------------------------------------
# generation jobs, istage="gen", don't need inputs
#------------------------------------------------------------------------------
inputs=""
if [ ."$istage" != ".gen" ] ; then
    inputs=$project/$dsid/catalog/$istage/$project.${dsid}.${istage}_$istream.art.$fss
fi

  stage=`echo $p_job_type | awk -F : '{print $1}'`
jobtype=`echo $p_job_type | awk -F : '{print $2}'`
job_type=${stage}_$jobtype

      njobs="xxxxx"
nev_per_job="xxxxx"
#------------------------------------------------------------------------------
# get_fcl $project/AAA_PROJECT.txt $dsid $istage $istub $job_type
#------------------------------------------------------------------------------
get_job_line() {
    project_file=$1
    cat $project_file | grep $2 | awk -v istage=$3 -v istub=$4 -v job_type=$5 '{if (($2 == istage) && ($3 == istub) && ($4 == job_type)) print  $0}'
}

get_fcl() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $5}' 
}

get_emerge() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $6}' 
}

get_nev_per_job() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $8}' 
}

get_segments() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $9}' 
}
#------------------------------------------------------------------------------
# end of parsing function definition
#------------------------------------------------------------------------------
aaa_project_file=$project/AAA_PROJECT.txt
              bf=`get_fcl $aaa_project_file $dsid $istage $istub $job_type`

	base_fcl=`echo $bf | awk -F : '{print $1}'`  ; echo $LINENO: base_fcl:$base_fcl
      resampling=`echo $bf | awk -F : '{print $2}'`
      if [ ".$resampling" == "." ] ; then resampling="no" ; fi

           merge=`get_emerge      $aaa_project_file $dsid $istage $istub $job_type`
     nev_per_job=`get_nev_per_job $aaa_project_file $dsid $istage $istub $job_type` ; echo $LINENO : nev_per_job:$nev_per_job
#------------------------------------------------------------------------------
# determine the total number of serments and the max number of segments per job
#------------------------------------------------------------------------------
     segments=`get_segments $aaa_project_file $dsid $istage $istub $job_type`

echo segments:$segments

	nsegtot=`echo $segments | awk -F : '{print $1}'`
max_seg_per_job=`echo $segments | awk -F : '{print $2}'`
if  [ ".$max_seg_per_job" == "." ] ; then max_seg_per_job=$nsegtot; fi
echo max_seg_per_job=$max_seg_per_job
#------------------------------------------------------------------------------
# after that - the number of jobs
#------------------------------------------------------------------------------
# echo nsegtot:$nsegtot max_seg_per_job:$max_seg_per_job
njobs=$((nsegtot/max_seg_per_job))
# echo njobs=$njobs
if [ $nsegtot != $((max_seg_per_job*njobs)) ] ; then njobs=$((njobs+1)) ; fi
#------------------------------------------------------------------------------
#  comamnd line always takes precedence
#------------------------------------------------------------------------------
x=`echo $ids | awk -F : '{print $2}'`; if [ ."$x" != "." ] ; then merge=$x ; fi

prefix='echo ' ; if [ ".$doit" != "." ] ; then prefix='' ; fi

setup mu2etools
setup mu2efiletools
setup mu2egrid

dsconf=${dsid}_${istage}_${istream}_${job_type}

if [ -d 000 ] ; then 
    tmp_stub=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1`
    echo directory 000 already exists, move it to 000.$tmp_stub
    mv 000 000.$tmp_stub
fi

template_fcl="undefined"

if [ $stage == "s0" ] ; then 
    if [ $jobtype == "stn" ] ; then # stntupling s1 stage or s2
	template_fcl=Stntuple/test/g4s0_pbar_vd91_stn.fcl
    else
	echo ERROR: UNKNOWN job type: $jobtype for stage=$stage
    fi
elif [ $stage == "s1" ] ; then 
    template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
elif [ $stage == "s2" ] ; then
    template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
elif [ $stage == "s3" ] ; then
    if [ $jobtype == "stn" ] ; then
	if   [ $istream == "tgtstops"  ] ; then template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
	elif [ $istream == "ootstops"  ] ; then template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
	elif [ $istream == "beam"      ] ; then template_fcl=Stntuple/test/g4s3_mothers_stn.fcl
	elif [ $istream == "crv"       ] ; then template_fcl=Stntuple/test/g4s3_crv_stn.fcl
	elif [ $istream == "truncated" ] ; then template_fcl=Stntuple/test/g4s3_truncated_stn.fcl
	else                                         echo WRONG INPUT STREAM: s3 $istream
	fi
    else
	template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
	nsegments=$nsegtot
    fi
elif [ $stage == "s4" ] ; then 
    
    if [ $jobtype == "stn" ] ; then
	if   [ $istream == "output"    ] ; then template_fcl=${project}/$dsid/${base_fcl}_$dsid.fcl
	else                                    echo WRONG INPUT STREAM: s4 $istream
	fi
    elif [ $jobtype == "sim" ] ; then
	template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
	nsegments=$nsegtot
	inputs=""
    else
	echo ERROR: UNKNOWN job type: $jobtype for stage=$stage
    fi
elif [ $stage == "ts1" ] ; then # 
    template_fcl=$project/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
elif [ $stage == "ts2" ] ; then # stntupling s1 stage or s2
    template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
elif [ $stage == "ts3" ] ; then # stntupling ts3 - use the same FCL as for s2
    template_fcl=${project}/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
elif [ $stage == "ts4" ] ; then 
    template_fcl=ts_warm_bore/$dsid/${base_fcl}_$dsid.fcl
    nsegments=$nsegtot
else
	echo ERROR: UNKNOWN stage=$stage
fi

if [ $template_fcl == "undefined" ] ; then exit -1 ; fi
#------------------------------------------------------------------------------
# form generate_fcl command, generate_fcl creates '000' subdirectory
#------------------------------------------------------------------------------
cmd="generate_fcl --description=$project --dsconf=$dsconf --embed $template_fcl"
#------------------------------------------------------------------------------
# if the number of input files per job is not defined on the command line, 
# use 'merge' defaults fron this script
#------------------------------------------------------------------------------
echo \$inputs=$inputs \$resampling=$resampling
if [ $resampling == "no" ] ; then
    if [ ".$inputs" != "." ] ; then cmd=$cmd" --merge=$merge        --inputs=$inputs"
    else                            cmd=$cmd" --events=$nev_per_job --njobs=$nsegments  --run-number=1000"
    fi
else
#------------------------------------------------------------------------------
# for resampling, assume one input file per segment
#------------------------------------------------------------------------------
    nserments=`cat $inputs | wc -l`
    cmd=$cmd" --run-number=1000 --events=$nev_per_job --njobs=$nsegments"
    cmd=$cmd" --auxinput=1:physics.filters.resamplingMixer.fileNames:$inputs"
fi

echo cmd=$cmd

$prefix$cmd

${prefix}mv seeds.$USER.$project.${dsconf}.*.txt 000/.
#------------------------------------------------------------------------------
# make sure we're not overwriting the existing directory
#------------------------------------------------------------------------------
istub=${istage}_${istream}
if [ ".$fileset" != "." ] ; then istub=${istub}_$fileset ; fi

dir=$PWD/$project/tmp_fcl/$dsid.$istub.$job_type

if [ -d $dir ] ; then 
    echo WARNING: directory $dir already exists, REMOVING and RECREATING !
    rm -rf $dir
fi

echo     mv 000 $dir
${prefix}mv 000 $dir
cd $dir
#------------------------------------------------------------------------------
# need to replace: 'MU2EGRIDDSOWNER' --> "$USER"
#                  'MU2EGRIDDSCONF'  --> ${dsid}_${istage}_${istream}_${jobtype}
#------------------------------------------------------------------------------
dsconf=${dsid}_${istage}_${istream}_${stage}_${jobtype}
for f in `ls *.fcl` ; do 
    f1=$f.tmp
    cat $f | sed "s/xxx_xxxx/$project/" | sed "s/MU2EGRIDDSOWNER/$USER/" | sed "s/MU2EGRIDDSCONF/$dsconf/">| $f1
    mv $f1 $f
done

if [ $jobtype == "stn" ] ; then
#------------------------------------------------------------------------------
# rename STNTUPLE output files to match the input .FCL file name 
#------------------------------------------------------------------------------
    for f in `ls *.fcl` ; do 
	stn=`basename $f | sed 's/cnf./nts./' | sed 's/.fcl/.stn/'` ; 
	#	    echo $stn; 
	line="physics.filters.InitStntuple.histFileName : \"$stn\""
	echo $line >> $f
    done
fi
#------------------------------------------------------------------------------
# make tarfile(s) with FCL files
# don't copy stnmaker FCL tarballs to /pnfs/resilient
#------------------------------------------------------------------------------
tdir=..
pid=$$
echo \$njobs=$njobs
if [ $njobs -gt 1 ] ; then
    fcl_list=/tmp/list_of_fcl_files.$pid.txt

    ls -l *.fcl | awk '{print $9}' >| $fcl_list

    split -d --lines $max_seg_per_job $fcl_list $pid.fcl.

    for f in `ls $pid.fcl.*` ; do
	ind=`echo $f | awk -F . '{print $3}'`
	ind_plus_one=`printf "%02i" $((ind+1))`
	tarfile=${project}.$dsid.${istage}_${istream}_$ind_plus_one.$job_type.fcl.tbz
	tar -cjf $tdir/$tarfile `cat $f`

	if [ $jobtype == "sim" ] ; then
	    echo CMD: cp -f $tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
	    if [ -f /pnfs/mu2e/resilient/users/murat/$tarfile ] ; then
		echo WARNING: tarfile /pnfs/mu2e/resilient/users/murat/$tarfile already exists, OVERWRITING !
	    fi
	    cp -f $tdir/$tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
	fi
    done
else 
    tarfile=${project}.$dsid.$istub.$job_type.fcl.tbz
    tar -cjf $tdir/$tarfile *.fcl
#------------------------------------------------------------------------------
# move fcl files for the simulation jobs to PNFS
#------------------------------------------------------------------------------
    if [ $jobtype == "sim" ] ; then
	echo CMD: cp -f $tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
	if [ -f /pnfs/mu2e/resilient/users/murat/$tarfile ] ; then
	    echo WARNING: tarfile /pnfs/mu2e/resilient/users/murat/$tarfile already exists, OVERWRITING !
	fi
	cp -f $tdir/$tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
    fi
fi
#------------------------------------------------------------------------------
