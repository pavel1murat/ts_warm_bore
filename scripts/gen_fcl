#!/bin/bash 
#-----------------------------------------------------------------------------------------------
# CATALOG_DIR needs to be defined, normally, points to /grid/fermiapp/mu2e/users/murat/catalogs
# defined in my ~/.bashrc
#-----------------------------------------------------------------------------------------------
        project=$1 # ts_warm_bore # $1 # ts_inner_bore
           dsid=$2 # 711_0001
            ist=$3 # s1:mubeam ... or gen:250_20000 ; if 'gen', '250_20000' means 'njobs_neventsPerJob'
            ids=$4 # if not ".", then catalog of the input dataset with a list of files in it
       job_type=$5 # s1_sim, s2_sim, or s3_stn ...
           doit=$6

 input_stage=`echo $ist | awk -F : '{print $1}'`;
input_stream=`echo $ist | awk -F : '{print $2}'`;
     fileset=`echo $ist | awk -F : '{print $3}'`;

fss="files" ; if [ ".$fileset" != "." ] ; then fss=$fss.$fileset ; fi

inputs=""
if [ $ids != "none" ] ; then
    ds=`echo $ids | awk -F : '{print $1}'`;
    if [ $ds == "." ] ; then inputs=$project/catalogs/$dsid/$input_stage/$project.${dsid}.${input_stage}_$input_stream.art.$fss
    else                     inputs=$ds.$fss
    fi
fi

emerge=`echo $ids | awk -F : '{print $2}'`;

  stage=`echo $job_type | awk -F _ '{print $1}'`
jobtype=`echo $job_type | awk -F _ '{print $2}'`

prefix='echo ' ; if [ ".$doit" != "." ] ; then prefix='' ; fi

setup mu2etools
setup mu2efiletools
setup mu2egrid

dsconf=${dsid}_${input_stage}_${input_stream}_${job_type}
njobs=xxxx
nevents_per_job=xxxxx

if [ -d 000 ] ; then 
    tmp_stub=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1`
    echo directory 000 already exists, move it to 000.$tmp_stub
    mv 000 000.$tmp_stub
fi

template_fcl="undefined"
       merge=0

if [ $stage == "s1" ] ; then 
    
    if [ $jobtype == "stn" ] ; then # stntupling s1 stage or s2
	template_fcl=Stntuple/test/g4s1_${input_stream}_stn.fcl
	merge=1000
    elif [ $jobtype == "sim" ] ; then
	if [ $input_stage == "gen" ] ; then # s1 stage
	    template_fcl=ts_warm_bore/$dsid/PS_$dsid.fcl
	    njobs=`echo $input_stream | awk -F _ '{print $1}'`
	    nevents_per_job=`echo $input_stream | awk -F _ '{print $2}'`
	else
	    echo ERROR: UNKNOWN job type: $jobtype for input_stage=$input_stage
	fi
    else
	echo ERROR: UNKNOWN job type: $jobtype for stage=$stage
    fi
elif [ $stage == "s2" ] ; then

    echo S2: inputs:$inputs

    if [ $jobtype == "stn" ] ; then
	merge=1000
	if [ $input_stream == "mubeam" ] ; then template_fcl=Stntuple/test/g4s2_mubeam_stn.fcl
	else                                    echo WRONG INPUT STREAM: s3 $input_stream
	fi
    elif [ $jobtype == "sim" ] ; then
	template_fcl=${project}/$dsid/TS_$dsid.fcl
	merge=25
    else
	echo ERROR: UNKNOWN job type: $jobtype for input_stage=$input_stage and input_stream=$input_stream
    fi
elif [ $stage == "ts1" ] ; then # 
    
    if [ $jobtype == "stn" ] ; then
	template_fcl=Stntuple/test/g4_ts1_${input_stream}_stn.fcl
	merge=1000
    elif [ $jobtype == "sim" ] ; then                        # pbars, VD91 --> Coll31out
	template_fcl=${project}/$dsid/TS_$dsid.fcl
	merge=50
    else
	echo ERROR: UNKNOWN job type: $jobtype for input_stage=$input_stage
    fi
elif [ $stage == "ts2" ] ; then # stntupling s1 stage or s2
    
    if [ $jobtype == "stn" ] ; then
	template_fcl=Stntuple/test/g4_ts2_${input_stream}_stn.fcl
	merge=1000
    elif [ $jobtype == "sim" ] ; then                        # pbars, Coll32In --> TS5
	template_fcl=${project}/$dsid/TS2_$dsid.fcl
	merge=50
    else
	echo ERROR: UNKNOWN job type: $jobtype for input_stage=$input_stage
    fi
elif [ $stage == "ts3" ] ; then # stntupling ts3 - use the same FCL as for s2
    
    if [ $jobtype == "stn" ] ; then
	template_fcl=Stntuple/test/g4s2_${input_stream}_stn.fcl
	merge=1000
    elif [ $jobtype == "sim" ] ; then                        # pbars, TS5 --> DS
	template_fcl=${project}/$dsid/TS3_$dsid.fcl
	merge=50
    else
	echo ERROR: UNKNOWN job type: $jobtype for input_stage=$input_stage
    fi
elif [ $stage == "s3" ] ; then

    if [ $jobtype == "stn" ] ; then
	merge=1000
	if   [ $input_stream == "tgtstops"  ] ; then template_fcl=Stntuple/test/g4s3_tgtstops_stn.fcl
	elif [ $input_stream == "ootstops"  ] ; then template_fcl=Stntuple/test/g4s3_ootstops_stn.fcl
	elif [ $input_stream == "beam"      ] ; then template_fcl=Stntuple/test/g4s3_mothers_stn.fcl
	elif [ $input_stream == "crv"       ] ; then template_fcl=Stntuple/test/g4s3_crv_stn.fcl
	elif [ $input_stream == "truncated" ] ; then template_fcl=Stntuple/test/g4s3_truncated_stn.fcl
	else                                         echo WRONG INPUT STREAM: s3 $input_stream
	fi
    elif [ $jobtype == "sim" ] ; then
	merge=2
	template_fcl=ts_warm_bore/$dsid/DS_$dsid.fcl
    else
	echo ERROR: UNKNOWN job type: $jobtype for stage=s3
    fi
else
	echo ERROR: UNKNOWN stage=$stage
fi

if [ $template_fcl == "undefined" ] ; then exit -1 ; fi
#------------------------------------------------------------------------------
# now generate fcl, creates '000' subdirectory
#------------------------------------------------------------------------------
cmd="generate_fcl --description=$project --dsconf=$dsconf --embed $template_fcl"

if [ ".$emerge" != "." ] ; then merge=$emerge ; fi

if [ ".$inputs" != "." ] ; then cmd=$cmd" --merge=$merge  --inputs=$inputs"
else                            cmd=$cmd" --events=$nevents_per_job --njobs=$njobs  --run=1"
fi

echo cmd=$cmd

$prefix$cmd

${prefix}mv seeds.$USER.$project.${dsconf}.*.txt 000/.
#------------------------------------------------------------------------------
# make sure we're not overwriting the existing directory
#------------------------------------------------------------------------------
istub=${input_stage}_${input_stream}
if [ ".$fileset" != "." ] ; then istub=${istub}_$fileset ; fi

dir=$PWD/$project/tmp_fcl/$dsid.$istub.$job_type

if [ -d $dir ] ; then 
    echo ERROR: directory $dir already exists !
else
    echo mv 000 $dir
    ${prefix}mv 000 $dir
    cd $dir
#------------------------------------------------------------------------------
# need to replace: 'MU2EGRIDDSOWNER' --> "$USER"
#                  'MU2EGRIDDSCONF'  --> ${dsid}_${input_stage}_${input_stream}_${jobtype}
#------------------------------------------------------------------------------
    dsconf=${dsid}_${input_stage}_${input_stream}_${stage}_${jobtype}
    for f in `ls *.fcl` ; do 
	f1=$f.tmp
	cat $f | sed "s/xxx_xxxx/$project/" | sed "s/MU2EGRIDDSOWNER/$USER/" | sed "s/MU2EGRIDDSCONF/$dsconf/">| $f1
	mv $f1 $f
    done

    tarfile=${project}.$dsid.$istub.$job_type.fcl.tbz
    tdir=..
    tar -cjf $tdir/$tarfile *.fcl
#------------------------------------------------------------------------------
# move fcl files for the simulation jobs to PNFS
#------------------------------------------------------------------------------
    if [ $jobtype == "sim" ] ; then
	echo CMD: cp $tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
	cp $tdir/$tarfile /pnfs/mu2e/resilient/users/murat/$tarfile
    fi
fi
