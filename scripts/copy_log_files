#!/bin/bash
#------------------------------------------------------------------------------
# example: ts_warm_bore/scripts/copy_log_files ts_warm_bore 760_1900 pbar:vd91 ts1:sim [.]
#------------------------------------------------------------------------------
scriptname="$(basename $0)"

      project=$1  # ts_warm_bore
         dsid=$2  # 711_0001
     p_istage=$3  # gen:250_20000 .... or s1:mubeam
   p_job_type=$4  # s1:sim , s2:stn , etc
         doit=$5

prefix="echo " ; if [ ".$doit" != "." ] ; then prefix="" ; fi


 istage=`echo $p_istage | awk -F : '{print $1}'`
istream=`echo $p_istage | awk -F : '{print $2}'`
fileset=`echo $p_istage | awk -F : '{print $3}'`

istub=${istream};
if [ ".$fileset" != "." ] ; then istub=${istub}_${fileset} ; fi

           stage=`echo $p_job_type | awk -F : '{print $1}'`
         jobtype=`echo $p_job_type | awk -F : '{print $2}'`
        job_type=${stage}_$jobtype

#------------------------------------------------------------------------------
# get_fcl $project/AAA_PROJECT.txt $dsid $istage $istub $jobtype
#------------------------------------------------------------------------------
get_job_line() {
    project_file=$1
    cat $project_file | grep $2 | awk -v istage=$3 -v istub=$4 -v job_type=$5 '{if (($2 == istage) && ($3 == istub) && ($4 == job_type)) print  $0}'
}

get_fcl() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $5}' 
}

get_emerge() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $6}' 
}

get_nev_per_job() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $8}' 
}

get_segments() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $9}' 
}

get_grid_job_id() { 
    get_job_line $1 $2 $3 $4 $5 | awk '{print $10}' 
}
#------------------------------------------------------------------------------
# end of parsing function definition
#------------------------------------------------------------------------------
aaa_project_file=$project/AAA_PROJECT.txt
      echo EMOE!!! get_grid_job_id $aaa_project_file $dsid $istage $istub $job_type
      grid_jobid=`get_grid_job_id $aaa_project_file $dsid $istage $istub $job_type`

topdir=/pnfs/mu2e/scratch/users/murat/workflow/${project}.${dsid}.${istage}_${istub}.${job_type}/outstage/$grid_jobid
echo topdir=$topdir
#------------------------------------------------------------------------------
# 1. copy log files from PNFS 
#------------------------------------------------------------------------------
outputdir=/mu2e/data/users/murat/datasets/$project/$dsid/$stage
echo outputdir=$outputdir
# exit

if [ ! -d $outputdir/log ] ; then mkdir -p $outputdir/log ; fi

echo .\$doit=.$doit
if [ ".$doit" != "." ] ; then 
    # skip log file copy (assume that move_stage_output was ran before
    for f in `ls $topdir/*/*/log.*.log` ; do 
	cp -vp $f $outputdir/log/.
    done
fi
#------------------------------------------------------------------------------
# check if the jobs finished successfully
#------------------------------------------------------------------------------
for f in `ls $outputdir/log/*.log` ; do 
    x=`cat $f | grep "mu2egrid exit status"` ; 
    if [ ".$x" != "." ] ; then 
	x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ; 
	if [ ".$x" != ."0" ] ; then 
	    echo $f: ERROR ; 
	    mv $f $f.err
	fi
    fi; 
done
#------------------------------------------------------------------------------
# finally, print number of events in output streams
#------------------------------------------------------------------------------
if   [ $p_job_type == "s3:sim"  ] ; then output_streams="mothers crv tgtstops ootstops truncated"
elif [ $p_job_type == "s1:sim"  ] ; then output_streams="mubeam"
elif [ $p_job_type == "s2:sim"  ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts1:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts2:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts3:sim" ] ; then output_streams="mubeam"
elif [ $p_job_type == "ts4:sim" ] ; then output_streams="ootstops tgtstops"
fi

echo outputdir=$outputdir

for f in `ls $outputdir/log/*.log` ; do 
    grid=`cat $f | grep "mu2egrid exit status"`
    if [ ".$grid" != "." ] ; then
	x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ;

	if [ .$x == ."0" ] ; then 
	    cat $f | grep "TrigReport Events total"
	fi
    else
	echo WARNING: file $f doesnt have mu2egrid exit status
	cat $f | grep "TrigReport Events total"
    fi 
done  | awk '{n+=$5} END{printf "INPUT:            nevents=%10i\n",n}'


for stream in $output_streams ; do
    #    echo $scriptname:$LINENO: \$stream = $stream

    output_path=$stream
    if [ $stream == "mubeam"   ] ; then output_path="mubeamout"     ; fi
    if [ $stream == "tgtstops" ] ; then output_path="tgtStopOutput" ; fi
    if [ $stream == "ootstops" ] ; then output_path="ootStopOutput" ; fi
    
    for f in `ls $outputdir/log/*.log` ; do 
	#	echo $scriptname:$LINENO: \$f = $f

	grid=`cat $f | grep "mu2egrid exit status"`
	if [ ".$grid" != "." ] ; then
	    x=`cat $f | grep "mu2egrid exit status" | awk '{print $4}'` ;
		
	    if [ .$x == ."0" ] ; then 
		cat $f | grep TrigReport | grep -i $output_path
	    fi
	else
	    # echo WARNING: file $f doesnt have mu2egrid exit status
	    cat $f | grep TrigReport | grep -i $output_path
	fi 
    done  | awk -v s=$stream '{n+=$5} END{printf "stream=%-10s nevents=%10i\n",s,n}'
done
